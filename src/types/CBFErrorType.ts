export const CBFErrorType = {
    // Tokenize errors
    INVALID_TOKEN : 'INVALID_TOKEN',

    // Transform errors
    TRANSFORM_FAIL : 'TRANSFORM_FAIL',
    MULTIPLE_EXPRESSION : 'MULTIPLE_EXPRESSION',
    PARSE_AST_FAIL : 'PARSE_FAIL',
    TOKEN_MISSING : 'TOKEN_MISSING',

    // AST errors
    INVALID_OPERAND : 'INVALID_OPERAND',
    NO_EXPRESSION : 'NO_EXPRESSION',
    UNHANDLE_EXPRESSION_REMAIN : 'UNHANDLE_EXPRESSION_REMAIN',
    INVALID_CALLEXPRESSION_FORMAT : 'INVALID_CALLEXPRESSION_FORMAT',

    // Build errors
    INVALID_DIRECTIVE : 'INVALID_DIRECTIVE',
    UNKNOWN_DIRECTIVE : 'UNKNOWN_DIRECTIVE',
    INVALID_FRAGMENT : 'INVALID_FRAGMENT',
    UNEXPECTED_EOF : 'UNEXPECTED_EOF',
    MISSING_FRAGMENT : 'MISSING_FRAGMENT',
    MISSING_ENDIF : 'MISSING_ENDIF',
    MISSING_ENDFOREACH : 'MISSING_ENDFOREACH',
    DUPLICATE_ELSE_DIRECTIVE : 'DUPLICATE_ELSE_DIRECTIVE',

    // Evaluate errors
    NO_HOOK : 'NO_HOOK',
    EXCEPTION_IN_HOOK : 'EXCEPTION_IN_HOOK',
    IDENTIFIER_RESOLVE_FAIL : 'IDENTIFIER_RESOLVE_FAIL',
    OPERATOR_NOT_SUPPORTED : 'OPERATOR_NOT_SUPPORTED',
    INVALID_AST_FORMAT : 'INVALID_AST_FORMAT',
    
    // Logic errors
    LOGIC_ERROR : 'LOGIC_ERROR',
} as const;
export type CBFErrorType = typeof CBFErrorType[keyof typeof CBFErrorType];

